// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SOAP.Web.Data;

#nullable disable

namespace SOAP.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SOAP.Web.Models.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdmissionCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Unique admission code for approved applications");

                    b.Property<string>("BoardingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Day")
                        .HasComment("Boarding or Day scholar preference");

                    b.Property<bool>("CheckedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether student has physically checked in");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Application creation timestamp");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Encrypted emergency contact phone");

                    b.Property<string>("EmergencyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Emergency contact name");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Encrypted personal data");

                    b.Property<string>("KcpeIndexNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("KCPE index number for student verification");

                    b.Property<string>("MedicalConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Encrypted personal data");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent/guardian full name");

                    b.Property<string>("ParentPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Encrypted personal data");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When application was reviewed by admin");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Admin user who reviewed the application");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasComment("Application status (Pending, Approved, Rejected)");

                    b.Property<int>("StudentAge")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student full name");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When application was submitted for review");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Last update timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Applications_CreatedAt");

                    b.HasIndex("KcpeIndexNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Applications_KcpeNumber");

                    b.HasIndex("ReviewedBy")
                        .HasDatabaseName("IX_Applications_ReviewedBy")
                        .HasFilter("ReviewedBy IS NOT NULL");

                    b.HasIndex("ParentPhone", "SchoolId")
                        .HasDatabaseName("IX_Applications_ParentPhone_School")
                        .HasFilter("ParentPhone IS NOT NULL");

                    b.HasIndex("SchoolId", "Status")
                        .HasDatabaseName("IX_Applications_School_Status");

                    b.HasIndex("Status", "UpdatedAt")
                        .HasDatabaseName("IX_Applications_Status_Updated");

                    b.HasIndex("SchoolId", "Status", "CreatedAt")
                        .HasDatabaseName("IX_Applications_School_Status_Date");

                    b.ToTable("Applications", t =>
                        {
                            t.HasComment("Row-level security: Users can only access applications from their school");
                        });
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.DataProcessingConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ConsentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("ConsentGiven")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("WithdrawnDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ConsentDate")
                        .HasDatabaseName("IX_DataProcessingConsents_ConsentDate");

                    b.HasIndex("ConsentType", "IsActive")
                        .HasDatabaseName("IX_DataProcessingConsents_Type_Active");

                    b.HasIndex("UserId", "ConsentType")
                        .HasDatabaseName("IX_DataProcessingConsents_User_Type");

                    b.ToTable("DataProcessingConsents", (string)null);
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Private")
                        .HasComment("Access level (Private, SchoolAdmin, Public)");

                    b.Property<string>("AdminFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("MIME type of the document");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of document (BIRTH_CERT, KCPE_CERT, etc.)");

                    b.Property<string>("EncryptionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Encryption key reference for sensitive documents");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("SHA-256 hash of file content for integrity verification");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasComment("File size in bytes");

                    b.Property<bool>("IsVirusScanPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether document passed virus scan");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Original filename as uploaded by user");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Reason for document rejection");

                    b.Property<string>("SecureFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Secure filename used for storage");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Last update timestamp");

                    b.Property<string>("UploadStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When document was uploaded");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasComment("Document verification status (Pending, Verified, Rejected)");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When document was verified");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Admin user who verified the document");

                    b.Property<DateTimeOffset?>("VirusScanDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When virus scan was performed");

                    b.HasKey("Id");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("IX_Documents_FileHash")
                        .HasFilter("FileHash IS NOT NULL");

                    b.HasIndex("VerifiedBy")
                        .HasDatabaseName("IX_Documents_VerifiedBy")
                        .HasFilter("VerifiedBy IS NOT NULL");

                    b.HasIndex("ApplicationId", "DocumentType")
                        .HasDatabaseName("IX_Documents_Application_Type");

                    b.HasIndex("IsVirusScanPassed", "VirusScanDate")
                        .HasDatabaseName("IX_Documents_VirusScan")
                        .HasFilter("IsVirusScanPassed = 0");

                    b.HasIndex("VerificationStatus", "UploadedAt")
                        .HasDatabaseName("IX_Documents_Status_Uploaded");

                    b.HasIndex("ApplicationId", "AccessLevel", "UploadedAt")
                        .HasDatabaseName("IX_Documents_Application_Access_Date");

                    b.ToTable("Documents", t =>
                        {
                            t.HasComment("Row-level security: Users can only access documents from applications they own or manage");
                        });
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("OtpExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("OtpUsed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("IpAddress", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_IP_Date");

                    b.HasIndex("PhoneNumber", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_Phone_Date");

                    b.HasIndex("Success", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_Success_Date");

                    b.HasIndex("PhoneNumber", "Success", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_Phone_Success_Date");

                    b.ToTable("LoginAttempts", (string)null);
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subdomain")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("County");

                    b.HasIndex("County", "IsActive")
                        .HasDatabaseName("IX_Schools_County_Active");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SchoolStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Record creation timestamp");

                    b.Property<bool>("HasApplied")
                        .HasColumnType("bit");

                    b.Property<string>("KcpeIndexNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("KCPE index number for student identification");

                    b.Property<int>("KcpeScore")
                        .HasColumnType("int")
                        .HasComment("KCPE total score");

                    b.Property<string>("PlacementStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Placed")
                        .HasComment("Student placement status (Placed, NotPlaced, Transferred)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student full name from KCPE records");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("KCPE examination year");

                    b.HasKey("Id");

                    b.HasIndex("KcpeScore")
                        .HasDatabaseName("IX_SchoolStudents_Score");

                    b.HasIndex("SchoolId", "PlacementStatus")
                        .HasDatabaseName("IX_SchoolStudents_School_Status");

                    b.HasIndex("SchoolId", "Year")
                        .HasDatabaseName("IX_SchoolStudents_School_Year");

                    b.HasIndex("KcpeIndexNumber", "SchoolId", "Year")
                        .IsUnique()
                        .HasDatabaseName("IX_SchoolStudents_KcpeNumber_School_Year");

                    b.ToTable("SchoolStudents", t =>
                        {
                            t.HasComment("Pre-loaded student records for KCPE verification and placement tracking");
                        });
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SecurityAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionPerformed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("ResourceAccessed")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Success")
                        .HasDatabaseName("IX_SecurityAuditLogs_Success");

                    b.HasIndex("EventType", "Timestamp")
                        .HasDatabaseName("IX_SecurityAuditLogs_EventType_Timestamp");

                    b.HasIndex("IpAddress", "Timestamp")
                        .HasDatabaseName("IX_SecurityAuditLogs_IpAddress_Timestamp");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_SecurityAuditLogs_UserId_Timestamp");

                    b.ToTable("SecurityAuditLogs", (string)null);
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SecurityIncidentRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AutomaticResponse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("DetectedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("IncidentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManualResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ResolvedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("SourceIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Open");

                    b.HasKey("Id");

                    b.HasIndex("AffectedUserId")
                        .HasDatabaseName("IX_SecurityIncidents_AffectedUser");

                    b.HasIndex("IncidentType", "DetectedAt")
                        .HasDatabaseName("IX_SecurityIncidents_Type_Date");

                    b.HasIndex("SourceIpAddress", "DetectedAt")
                        .HasDatabaseName("IX_SecurityIncidents_IP_Date");

                    b.HasIndex("Status", "Severity")
                        .HasDatabaseName("IX_SecurityIncidents_Status_Severity");

                    b.ToTable("SecurityIncidents", (string)null);
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,4)")
                        .HasComment("Cost of SMS in local currency");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("When SMS was queued");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When SMS was delivered to recipient");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Reason for SMS failure");

                    b.Property<int>("MaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3)
                        .HasComment("Maximum retry attempts allowed");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("SMS message content");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of SMS (OTP, NOTIFICATION, ALERT)");

                    b.Property<DateTimeOffset?>("NextRetryAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When next retry should be attempted");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Recipient phone number");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("SMS provider message ID");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Number of retry attempts");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("When SMS was sent to provider");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasComment("SMS delivery status (Pending, Sent, Failed, Delivered)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Last update timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SmsLogs_Status");

                    b.HasIndex("PhoneNumber", "CreatedAt")
                        .HasDatabaseName("IX_SmsLogs_Phone_Date");

                    b.HasIndex("Status", "NextRetryAt")
                        .HasDatabaseName("IX_SmsLogs_Status_NextRetry")
                        .HasFilter("Status = 'Failed' AND NextRetryAt IS NOT NULL");

                    b.HasIndex("MessageType", "Status", "CreatedAt")
                        .HasDatabaseName("IX_SmsLogs_Type_Status_Date");

                    b.HasIndex("PhoneNumber", "MessageType", "CreatedAt")
                        .HasDatabaseName("IX_SmsLogs_Phone_Type_Date");

                    b.HasIndex("Status", "CreatedAt", "Cost")
                        .HasDatabaseName("IX_SmsLogs_Status_Date_Cost")
                        .HasFilter("Status = 'Delivered' AND Cost IS NOT NULL");

                    b.ToTable("SmsLogs", t =>
                        {
                            t.HasComment("SMS communication log with delivery tracking and rate limiting");
                        });
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Account creation timestamp");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Date when user data was anonymized/deleted");

                    b.Property<string>("DeletionReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Reason for data deletion (GDPR compliance)");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Number of consecutive failed login attempts");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether the user account is active");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Last successful login timestamp");

                    b.Property<DateTimeOffset?>("LockedUntil")
                        .HasColumnType("datetimeoffset")
                        .HasComment("Account lockout expiry time");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Encrypted phone number for authentication");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User role (Parent, SchoolAdmin, SuperAdmin)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId1")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LockedUntil")
                        .HasDatabaseName("IX_Users_LockedUntil")
                        .HasFilter("LockedUntil IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_PhoneNumber");

                    b.HasIndex("SchoolId1");

                    b.HasIndex("IsActive", "LastLoginAt")
                        .HasDatabaseName("IX_Users_Active_LastLogin")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("IX_Users_Role_Active");

                    b.HasIndex("SchoolId", "Role")
                        .HasDatabaseName("IX_Users_School_Role")
                        .HasFilter("SchoolId IS NOT NULL");

                    b.ToTable("Users", t =>
                        {
                            t.HasComment("User accounts with role-based access control and security monitoring");
                        });
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.Application", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.School", "School")
                        .WithMany("Applications")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.Document", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.Application", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.LoginAttempt", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SchoolStudent", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.School", "School")
                        .WithMany("SchoolStudents")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.SmsLog", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.User", b =>
                {
                    b.HasOne("SOAP.Web.Models.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SOAP.Web.Models.Entities.School", null)
                        .WithMany("Users")
                        .HasForeignKey("SchoolId1");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.Application", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SOAP.Web.Models.Entities.School", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("SchoolStudents");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
